/*
    SecuNik LogX - Common Malware Detection Rules
    Author: SecuNik LogX Team
    Date: 2024-01-01
    Description: Detection rules for common malware families including ransomware, trojans, backdoors, and info-stealers
*/

import "pe"
import "math"

// ============= RANSOMWARE DETECTION =============

rule Ransomware_WannaCry_Indicators : ransomware
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects WannaCry ransomware indicators"
        reference = "https://www.us-cert.gov/ncas/alerts/TA17-132A"
        severity = "high"
        
    strings:
        $string1 = "WNcry@2ol7" nocase
        $string2 = "WanaDecryptor" nocase
        $string3 = "WANACRY!" ascii
        $string4 = "wcry@123" nocase
        $mutex = "Global\\MsWinZonesCacheCounterMutexA"
        $ransom_ext = ".WNCRY" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        (2 of ($string*) or $mutex or $ransom_ext)
}

rule Ransomware_Ryuk_Patterns : ransomware
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects Ryuk ransomware patterns"
        reference = "https://www.fireeye.com/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html"
        severity = "high"
        
    strings:
        $string1 = "RyukReadMe.html" nocase
        $string2 = "UNIQUE_ID_DO_NOT_REMOVE" ascii
        $string3 = "Wake up Neo" ascii
        $string4 = "The Matrix has you" ascii
        $marker = { 52 59 55 4B }
        $crypto_api1 = "CryptAcquireContextW" ascii
        $crypto_api2 = "CryptGenRandom" ascii
        
    condition:
        uint16(0) == 0x5A4D and
        (2 of ($string*) or ($marker and all of ($crypto_api*)))
}

rule Ransomware_Generic_Behavior : ransomware suspicious
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Generic ransomware behavior patterns"
        severity = "high"
        
    strings:
        $ext1 = ".encrypted" nocase
        $ext2 = ".locked" nocase
        $ext3 = ".crypto" nocase
        $readme1 = "HOW_TO_DECRYPT" nocase
        $readme2 = "README_FOR_DECRYPT" nocase
        $readme3 = "YOUR_FILES_ARE_ENCRYPTED" nocase
        $bitcoin1 = "bitcoin:" nocase
        $bitcoin2 = "BTC wallet" nocase
        $vssadmin = "vssadmin delete shadows" nocase
        $wbadmin = "wbadmin delete backup" nocase
        $bcdedit = "bcdedit /set {default} recoveryenabled no" nocase
        
    condition:
        (2 of ($ext*) or 2 of ($readme*)) and 
        (any of ($bitcoin*) or any of ($vssadmin, $wbadmin, $bcdedit))
}

// ============= TROJAN DETECTION =============

rule Trojan_Emotet_Indicators : trojan
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects Emotet trojan indicators"
        reference = "https://www.us-cert.gov/ncas/alerts/aa20-280a"
        severity = "high"
        
    strings:
        $string1 = "Emotet" ascii wide
        $string2 = "svchost.exe" ascii
        $string3 = "POST" ascii
        $pdb_path = "\\Miner\\Release\\miner.pdb" ascii
        $c2_pattern = /https?:\/\/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{2,5}/
        $mutex = { 45 6D 6F 74 65 74 }
        
    condition:
        uint16(0) == 0x5A4D and
        ($pdb_path or $mutex or ($string2 and $string3 and $c2_pattern))
}

rule Trojan_TrickBot_Patterns : trojan
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects TrickBot trojan patterns"
        severity = "high"
        
    strings:
        $string1 = "TrickBot" ascii wide
        $string2 = "<moduleconfig>" ascii
        $string3 = "group_tag" ascii
        $string4 = "client_id" ascii
        $config_pattern = /<mcconf>(.*?)<\/mcconf>/s
        $module1 = "injectDll" ascii
        $module2 = "systeminfo" ascii
        $module3 = "pwgrab" ascii
        
    condition:
        uint16(0) == 0x5A4D and
        (2 of ($string*) or $config_pattern or 2 of ($module*))
}

// ============= BACKDOOR DETECTION =============

rule Backdoor_CobaltStrike_Beacon : backdoor
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects Cobalt Strike beacon"
        reference = "https://blog.cobaltstrike.com/2013/07/02/a-beacon-primer/"
        severity = "high"
        
    strings:
        $string1 = "beacon.dll" ascii
        $string2 = "%d is an x64 process (can't inject x86 content)" ascii
        $string3 = "ReflectiveLoader" ascii
        $string4 = "pipe\\msagent_" ascii
        $config = { 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 ?? ?? ?? ?? }
        $sleep_mask = { 48 89 5C 24 08 57 48 83 EC 20 48 8B 59 10 48 8B F9 48 8B 49 08 FF 17 }
        
    condition:
        uint16(0) == 0x5A4D and
        (2 of ($string*) or $config or $sleep_mask)
}

rule Backdoor_Metasploit_Meterpreter : backdoor
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects Metasploit Meterpreter payloads"
        severity = "high"
        
    strings:
        $string1 = "metsrv.dll" ascii
        $string2 = "ReflectiveLoader" ascii
        $string3 = "stdapi_" ascii
        $string4 = "PACKET TRANSMIT" ascii
        $url_pattern = /https?:\/\/[\d\.]+:\d+\/[a-zA-Z0-9_]+/
        $shellcode = { FC 48 83 E4 F0 E8 CC 00 00 00 41 51 41 50 52 51 }
        
    condition:
        (2 of ($string*) or $shellcode) and 
        ($url_pattern or pe.exports("ReflectiveLoader"))
}

// ============= INFO STEALER DETECTION =============

rule InfoStealer_Mimikatz_Indicators : infostealer
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects Mimikatz credential dumping tool"
        reference = "https://github.com/gentilkiwi/mimikatz"
        severity = "high"
        
    strings:
        $string1 = "mimikatz" ascii wide nocase
        $string2 = "sekurlsa" ascii wide
        $string3 = "logonpasswords" ascii wide
        $string4 = "gentilkiwi" ascii wide
        $string5 = "benjamin DELPY" ascii wide
        $string6 = "A La Vie, A L'Amour" ascii wide
        $func1 = "kuhl_m_sekurlsa_msv_pth" ascii
        $func2 = "kuhl_m_sekurlsa_wdigest" ascii
        
    condition:
        uint16(0) == 0x5A4D and
        (3 of ($string*) or 2 of ($func*))
}

rule InfoStealer_LaZagne_Patterns : infostealer
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects LaZagne password recovery tool"
        severity = "medium"
        
    strings:
        $string1 = "LaZagne" ascii wide
        $string2 = "softwares.browsers" ascii
        $string3 = "softwares.chats" ascii
        $string4 = "softwares.databases" ascii
        $string5 = "softwares.games" ascii
        $module1 = "ChromePass" ascii
        $module2 = "FirefoxPass" ascii
        $module3 = "OutlookPass" ascii
        
    condition:
        (3 of ($string*) or 2 of ($module*))
}

// ============= DROPPER/LOADER DETECTION =============

rule Dropper_Generic_Patterns : dropper suspicious
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Generic dropper/loader patterns"
        severity = "medium"
        
    strings:
        $api1 = "URLDownloadToFile" ascii
        $api2 = "WinExec" ascii
        $api3 = "ShellExecute" ascii
        $api4 = "CreateProcess" ascii
        $api5 = "WriteProcessMemory" ascii
        $api6 = "VirtualAllocEx" ascii
        $api7 = "CreateRemoteThread" ascii
        $temp1 = "%TEMP%" ascii wide
        $temp2 = "\\Temp\\" ascii wide
        $ps1 = "powershell.exe -nop -w hidden -c" nocase
        $ps2 = "IEX(New-Object Net.WebClient).DownloadString" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        (
            (3 of ($api*) and any of ($temp*)) or
            any of ($ps*)
        )
}

// ============= PACKER/CRYPTER DETECTION =============

rule Packer_UPX_Detection : packer
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects UPX packed executables"
        severity = "low"
        
    strings:
        $upx1 = "UPX!" ascii
        $upx2 = "UPX0" ascii
        $upx3 = "UPX1" ascii
        $upx4 = "UPX2" ascii
        
    condition:
        uint16(0) == 0x5A4D and
        ($upx1 at 0x3C0 or any of ($upx*))
}

rule Packer_VMProtect_Detection : packer
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects VMProtect packed files"
        severity = "low"
        
    strings:
        $vmp1 = ".vmp0" ascii
        $vmp2 = ".vmp1" ascii
        $vmp3 = ".vmp2" ascii
        $marker = { 56 4D 50 72 6F 74 65 63 74 }
        
    condition:
        uint16(0) == 0x5A4D and
        (any of ($vmp*) or $marker)
}

// ============= PE ANOMALY DETECTION =============

rule PE_Anomaly_Suspicious_Sections : suspicious
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects PE files with suspicious section characteristics"
        severity = "medium"
        
    condition:
        uint16(0) == 0x5A4D and
        (
            // Executable section with write permissions
            for any i in (0..pe.number_of_sections - 1):
            (
                pe.sections[i].characteristics & pe.SECTION_MEM_EXECUTE and
                pe.sections[i].characteristics & pe.SECTION_MEM_WRITE
            ) or
            // Very high entropy (likely encrypted/packed)
            for any i in (0..pe.number_of_sections - 1):
            (
                math.entropy(pe.sections[i].raw_data_offset, pe.sections[i].raw_data_size) > 7.5
            ) or
            // Section with zero raw size but large virtual size
            for any i in (0..pe.number_of_sections - 1):
            (
                pe.sections[i].raw_data_size == 0 and
                pe.sections[i].virtual_size > 0x1000
            )
        )
}

rule PE_Anomaly_Suspicious_Imports : suspicious
{
    meta:
        author = "SecuNik LogX"
        date = "2024-01-01"
        description = "Detects suspicious import combinations"
        severity = "medium"
        
    condition:
        uint16(0) == 0x5A4D and
        (
            // Process injection imports
            (
                pe.imports("kernel32.dll", "VirtualAllocEx") and
                pe.imports("kernel32.dll", "WriteProcessMemory") and
                pe.imports("kernel32.dll", "CreateRemoteThread")
            ) or
            // Keylogger imports
            (
                pe.imports("user32.dll", "SetWindowsHookEx") and
                pe.imports("user32.dll", "GetAsyncKeyState") and
                pe.imports("user32.dll", "GetKeyState")
            )
        )
}